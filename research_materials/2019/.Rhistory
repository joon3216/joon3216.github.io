## Variables
max_n <- 50
v <- c(1, rep(0, 6)) # initial probabilities
# P matrix
P <- diag(0:6)
for (i in 1:7) {
for (j in 1:7) {
if (i < j) {
P[i, j] <- 1
}
}
}
P <- P / 6
P
p_ij <- function(i, j) {if (i == j) {j / 6} else if (i < j) {1 / 6} else {0}}
p_ij(0, 0)
p_ij(0, 1)
p_ij(0, 2)
p_ij(0, 3)
p_ij(0, 4)
p_ij(0, 5)
p_ij(0, 6)
p_ij(1, 0)
p_ij(1, 1)
p_ij(1, 2)
p_ij(1, 3)
p_ij(1, 4)
p_ij(1, 5)
p_ij(1, 6)
p_ij(2, 0)
p_ij(2, 1)
p_ij(2, 2)
p_ij(2, 3)
p_ij(2, 4)
p_ij(2, 5)
p_ij(2, 6)
p_ij(3, 0)
p_ij(3, 1)
p_ij(3, 2)
p_ij(3, 3)
p_ij(3, 4)
p_ij(3, 5)
p_ij(3, 6)
p_ij(4, 0)
p_ij(4, 1)
p_ij(4, 2)
p_ij(4, 3)
p_ij(4, 4)
p_ij(4, 5)
p_ij(4, 6)
p_ij(4, 7)
v <- c(1, rep(0, 6))
v
max_n <- 50
P <- diag(0:6)
P
P
# Settings
max_n <- 50
v <- c(1, rep(0, 6)) # initial probabilities v_0, v_1, ..., v_6
# P matrix
P <- diag(0:6)
for (i in 1:7) {
for (j in 1:7) {
if (i < j) {
P[i, j] <- 1
}
}
}
(P <- P / 6)
P
P2 = list(P, P)
P2
Reduce('%*%', P2)
P %*% P
vector(P, 2)
vector('list', 2, P)
vector('list', P, 2)
vector('list', 2)
lapply(P, '[')
lapply(P, '[:')
lapply(P, '[:]')
lapply(P, function(P){P})
lapply(0:6, function(P){P})
lapply(0:6, function(P = P){P})
Pn <- function(n, P) {
lst_n <- vector('list', n)
for (i in 1:n) {
lst_n[[i]] <- P
}
Reduce('%*%', lst_n)
}
Pn(1, P)
Pn(2, P)
Pn(3, P)
Pn(4, P)
Pn(5, P)
Pk <- function(P, k) {
# P: a numeric matrix
# k: a natural number
lst_k <- vector('list', k)
for (i in 1:k) {
lst_n[[i]] <- P
}
Reduce('%*%', lst_k)
}
mu_k <- function(v, P, k) {v %*% Pk(k, P)}
1:max_n
sapply(1:3, function(k){mu_k(v, P, k)})
lapply(1:3, function(k){mu_k(v, P, k)})
lapply(1:3, function(k){mu_k(v = v, P = P, k)})
v
P
matrix(v)
t(matrix(v))
t(v)
Pk <- function(P, k) {
# P: a numeric matrix
# k: a natural number
lst_k <- vector('list', k)
for (i in 1:k) {
lst_n[[i]] <- P
}
Reduce('%*%', lst_k)
}
mu_k <- function(v, P, k) {t(v) %*% Pk(k, P)}
sapply(1:3, function(k){mu_k(v, P, k)})
v
mu_k(v, P, 1)
mu_k(v, P, 2)
Pk <- function(P, k) {
# P: a numeric matrix
# k: a natural number
lst_k <- vector('list', k)
for (i in 1:k) {
lst_n[[i]] <- P
}
Reduce('%*%', lst_k)
}
mu_k <- function(v, P, k) {t(v) %*% Pk(P, k)}
mu_k(v, P, 1)
mu_k(v, P, 2)
Pk <- function(P, k) {
# P: a numeric matrix
# k: a natural number
lst_k <- vector('list', k)
for (i in 1:k) {
lst_k[[i]] <- P
}
Reduce('%*%', lst_k)
}
mu_k <- function(v, P, k) {t(v) %*% Pk(P, k)}
mu_k(v, P, 1)
mu_k(v, P, 2)
mu_k(v, P, 3)
sapply(1:3, function(k){mu_k(v, P, k)})
t(sapply(1:3, function(k){mu_k(v, P, k)}))
c(1, rep(0, 6))
t(sapply(1:3, function(k){mu_k(v, P, k)}))
rbind(c(1, rep(0, 6)), t(sapply(1:3, function(k){mu_k(v, P, k)})))
test <- rbind(c(1, rep(0, 6)), t(sapply(1:3, function(k){mu_k(v, P, k)})))
test
rownames(test) <- 0:3
test
tes
test
rownames_to_column](test)
rownames_to_column(test)
tibble::rownames_to_column(test)
tibble::rownames_to_column(data.frame(test))
test
cbind(test, 0:3)
mu_collection <-
t(sapply(1:max_n, function(k){mu_k(v, P, k)})) %>%
rbind(c(1, rep(0, 6)), .) %>%
cbind(0:max_n, .)
library(dplyr)
library(gganimate)
gather <- tidyr::gather
include_graphics <- knitr::include_graphics
mu_collection <-
t(sapply(1:max_n, function(k){mu_k(v, P, k)})) %>%
rbind(c(1, rep(0, 6)), .) %>%
cbind(0:max_n, .)
mu_collection
mu_collection <-
t(sapply(1:max_n, function(k){mu_k(v, P, k)})) %>%
rbind(v, .) %>%
cbind(0:max_n, .) %>%
'colnames<-'('n', 1:6) %>%
as_tibble()
mu_collection <-
t(sapply(1:max_n, function(k){mu_k(v, P, k)})) %>%
rbind(v, .) %>%
cbind(0:max_n, .) %>%
'colnames<-'(c('n', 1:6)) %>%
as_tibble()
mu_collection <-
t(sapply(1:max_n, function(k){mu_k(v, P, k)})) %>%
rbind(v, .) %>%
cbind(0:max_n, .)
mu_collection
mu_collection <-
t(sapply(1:max_n, function(k){mu_k(v, P, k)})) %>%
rbind(v, .) %>%
cbind(0:max_n, .) %>%
'colnames<-'(c('n', 0:6)) %>%
as_tibble()
mu_collections
mu_collection
(mu_collection <-
t(sapply(1:max_n, function(k){mu_k(v, P, k)})) %>%
rbind(v, .) %>%
cbind(0:max_n, .) %>%
'colnames<-'(c('n', 0:6)) %>%
as_tibble())
mu_collection
mu_collection %>% gather(key, value, -n)
mu_collection %>% gather(key, value, -n) %>% arrange(key)
mu_collection %>% gather(key, value, -n) %>% arrange(n)
mu_tidy <- mu_collection %>% gather(key, value, -n)
mu_tidy
head(mu_collection, n = 10)
options(scipen = 999)
head(mu_collection, n = 10)
options(scipen = 500)
head(mu_collection, n = 10)
options(scipen = 10)
head(mu_collection, n = 10)
options(scipen = 0)
head(mu_collection, n = 10)
options(scipen = 1)
head(mu_collection, n = 10)
options(scipen = 2)
head(mu_collection, n = 10)
head(mu_collection, n = 10)
p_ij(0, 0)
p_ij(0, 1)
p_ij(0, 2)
p_ij(0, 3)
p_ij(0, 4)
p_ij(0, 5)
p_ij(0, 6)
p_ij(0, 1:6)
p_ij(1, 0)
p_ij(1, 1)
p_ij(1, 2)
p_ij(1, 3)
p_ij(1, 4)
p_ij(1, 5)
p_ij(1, 6)
p_ij
p_ij <- function(i, j) {
