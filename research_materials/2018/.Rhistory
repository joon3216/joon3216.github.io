CI_collections
CI_collections %>% summarize(contains = lower < true_mu && true_mu < upper)
set.seed(1024)
CI_collections <- NULL
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mu <- 0
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mu)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mu && true_mu < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper')) %>%
as_tibble() %>%
mutate(CI_number = 1:num_of_ci)
set.seed(1024)
CI_collections <- NULL
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mu <- 0
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mu)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mu && true_mu < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(CI_number = 1:num_of_ci)
#mutate(contains = lower < true_mu && true_mu < upper)
#    gather(key, value, -(CI_number:contains))
# data.frame(
#     x = 1:num_of_ci,
#     line_drawer = c(
#         CI_collections %>% filter(key == 'lower') %>% pull(value),
#         CI_collections %>% filter(key == 'upper') %>% pull(value)
#     )
# ) %>%
#     ggplot(aes(x = x)) +
#     geom_line(aes(y = line_drawer, group = x), alpha = .5)
# ggplot(CI_collections, aes(x = CI_number)) +
#     geom_line(aes(y = value, group = CI_number, col = contains), alpha = .5)
CI_collections
CI_collections %>% print(n = Inf)
set.seed(1024)
CI_collections <- NULL
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mu <- 0
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mu)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- as.logical(lower < true_mu && true_mu < upper)
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(CI_number = 1:num_of_ci)
#mutate(contains = lower < true_mu && true_mu < upper)
#    gather(key, value, -(CI_number:contains))
# data.frame(
#     x = 1:num_of_ci,
#     line_drawer = c(
#         CI_collections %>% filter(key == 'lower') %>% pull(value),
#         CI_collections %>% filter(key == 'upper') %>% pull(value)
#     )
# ) %>%
#     ggplot(aes(x = x)) +
#     geom_line(aes(y = line_drawer, group = x), alpha = .5)
# ggplot(CI_collections, aes(x = CI_number)) +
#     geom_line(aes(y = value, group = CI_number, col = contains), alpha = .5)
CI_collections
set.seed(1024)
CI_collections <- NULL
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mu <- 0
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mu)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mu && true_mu < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(
CI_number = 1:num_of_ci,
contains = as.logical(contains)
)
#mutate(contains = lower < true_mu && true_mu < upper)
#    gather(key, value, -(CI_number:contains))
# data.frame(
#     x = 1:num_of_ci,
#     line_drawer = c(
#         CI_collections %>% filter(key == 'lower') %>% pull(value),
#         CI_collections %>% filter(key == 'upper') %>% pull(value)
#     )
# ) %>%
#     ggplot(aes(x = x)) +
#     geom_line(aes(y = line_drawer, group = x), alpha = .5)
# ggplot(CI_collections, aes(x = CI_number)) +
#     geom_line(aes(y = value, group = CI_number, col = contains), alpha = .5)
CI_collections
CI_collections %>% print(n = Inf)
set.seed(1024)
CI_collections <- NULL
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mu <- 0
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mu)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mu && true_mu < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(
CI_number = 1:num_of_ci,
contains = as.logical(contains)
)
gather(key, value, -(CI_number:contains))
set.seed(1024)
CI_collections <- NULL
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mu <- 0
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mu)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mu && true_mu < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(
CI_number = 1:num_of_ci,
contains = as.logical(contains)
) %>%
gather(key, value, -(CI_number:contains))
# data.frame(
#     x = 1:num_of_ci,
#     line_drawer = c(
#         CI_collections %>% filter(key == 'lower') %>% pull(value),
#         CI_collections %>% filter(key == 'upper') %>% pull(value)
#     )
# ) %>%
#     ggplot(aes(x = x)) +
#     geom_line(aes(y = line_drawer, group = x), alpha = .5)
# ggplot(CI_collections, aes(x = CI_number)) +
#     geom_line(aes(y = value, group = CI_number, col = contains), alpha = .5)
set.seed(1024)
CI_collections <- NULL
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mu <- 0
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mu)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mu && true_mu < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(
CI_number = 1:num_of_ci,
contains = as.logical(contains)
) %>%
gather(key, value, -(CI_number:contains))
# data.frame(
#     x = 1:num_of_ci,
#     line_drawer = c(
#         CI_collections %>% filter(key == 'lower') %>% pull(value),
#         CI_collections %>% filter(key == 'upper') %>% pull(value)
#     )
# ) %>%
#     ggplot(aes(x = x)) +
#     geom_line(aes(y = line_drawer, group = x), alpha = .5)
CI_collections %>% ggplot(aes(x = CI_number)) +
geom_line(aes(y = value, group = CI_number, col = contains), alpha = .5)
set.seed(1024)
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mean <- 0
CI_collections <- NULL
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mean)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mean && true_mean < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(
CI_number = 1:num_of_ci,
contains = as.logical(contains)
) %>%
gather(key, value, -(CI_number:contains))
CI_collections %>% ggplot(aes(x = CI_number)) +
geom_line(
aes(y = value, group = CI_number, col = contains),
alpha = .5
)
CI_collectinos
CI_collections
set.seed(1024)
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mean <- 0
CI_collections <- NULL
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mean)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mean && true_mean < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(
CI_number = 1:num_of_ci,
contains = as.logical(contains)
) %>%
gather(key, value, -(CI_number:contains))
CI_collections %>% ggplot(aes(x = CI_number)) +
geom_line(
aes(y = value, group = CI_number, col = contains),
alpha = .5
)
set.seed(1024)
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mean <- 0
CI_collections <- NULL
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mean)
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mean && true_mean < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
CI_collections <- CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(
CI_number = 1:num_of_ci,
contains = as.logical(contains)
) %>%
gather(key, value, -(CI_number:contains))
CI_collections %>% ggplot(aes(x = CI_number)) +
geom_line(
aes(y = value, group = CI_number, col = contains)
) +
theme(legend.position = 'top')
set.seed(1024)
runif(1, .5, 5)
runif(1, .5, 5)
runif(1, .5, 5)
runif(1, .5, 5)
runif(1, .5, 5)
set.seed(1024)
runif(1, min = .5, max = 5)
set.seed(1024)
# Settings
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mean <- 0
true_var <- runif(1, .5, 5) # i.e. we don't know the true variance
# Collect lower and upper bounds of CI's
CI_collections <- NULL
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mean, sd = sqrt(true_var))
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mean && true_mean < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
# Plot CI's
CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(
CI_number = 1:num_of_ci,
contains = as.logical(contains)
) %>%
gather(key, value, -(CI_number:contains)) %>%
ggplot(aes(x = CI_number)) +
geom_line(aes(y = value, group = CI_number, col = contains)) +
labs(x = 'Dataset', y = 'CI') +
theme(legend.position = 'top')
t_star
pt(t_star, df = n - 1)
sqrt(1.48)
set.seed(1024)
# Settings
conf_lvl <- .95
num_of_ci <- 100
n <- 1000
true_mean <- 0
true_var <- runif(1, .5, 5) # i.e. we don't know the true variance
# Collect lower and upper bounds of CI's
CI_collections <- NULL
t_star <- qt((1 + conf_lvl) / 2, df = n - 1)
for (i in 1:num_of_ci) {
X <- rnorm(n, mean = true_mean, sd = sqrt(true_var))
lower <- mean(X) - (sd(X) / sqrt(n)) * t_star
upper <- mean(X) + (sd(X) / sqrt(n)) * t_star
contains <- lower < true_mean && true_mean < upper
CI_collections <- rbind(CI_collections, c(lower, upper, contains))
}
# Plot CI's
CI_collections %>%
'colnames<-'(c('lower', 'upper', 'contains')) %>%
as_tibble() %>%
mutate(
CI_number = 1:num_of_ci,
contains = as.logical(contains)
) %>%
gather(key, value, -(CI_number:contains)) %>%
ggplot(aes(x = CI_number)) +
geom_line(aes(y = value, group = CI_number, col = contains)) +
labs(x = 'Dataset', y = 'CI') +
theme(legend.position = 'top') +
guides(col = guide_legend(title = 'Contains 0'))
library(dplyr)
library(ggplot2)
ddply <- plyr::ddply
gather <- tidyr::gather
data(frets, package = 'boot')
paste(b, 0:1)
paste0('b', 0:1)
CIs <- function(X, Y, c, level = .95, has_intercept = T) {
n <- nrow(X)
k <- ncol(X)
if (missing(c)) {c <- rep(0, k)}
Betahat <- solve(t(X) %*% X, t(X) %*% Y)
I_n <- diag(1, n)
H <- X %*% solve(t(X) %*% X) %*% t(X)
CI <- matrix(rep(0, k * 2), ncol = 2)
for (i in 1:k) {
betahat_i <- Betahat[i, ]
se_i <- sqrt(
((t(Y) %*% (I_n - H) %*% Y) / (n - k)) *
solve(t(X) %*% X)[i, i]
)
t_star <- qt((1 + level) / 2, df = n - k)
CI[i, ] <- c(betahat_i - se_i * t_star, betahat_i + se_i * t_star)
}
colnames(CI, c('lower', 'upper'))
rownames(CI, paste0('b', ifelse(has_intercept, 0:(k - 1), 1:k)))
CI
}
F_stat <- function(X, Y, c, level = .95) {
n <- nrow(X)
k <- ncol(X)
if (missing(c)) {c <- rep(0, k)}
Betahat <- solve(t(X) %*% X, t(X) %*% Y)
I_n <- diag(1, n)
H <- X %*% solve(t(X) %*% X) %*% t(X)
numer <- t(Betahat - c) %*% (t(X) %*% X) %*% (Betahat - c) / k
denom <- (t(Y) %*% (I_n - H) %*% Y) / (n - k)
f_stat <- (numer / denom)[1, 1]
list(
c = c,
f_stat = f_stat, df1 = k, df2 = n - k,
p_val = pf(f_stat, df1 = k, df2 = n - k, lower = F)
)
}
(cis <- CIs(X, Y))
paste0('b', ifelse(has_intercept, 0:(k - 1), 1:k))
has_intercept = T
paste0('b', ifelse(has_intercept, 0:(k - 1), 1:k))
k = 2
paste0('b', ifelse(has_intercept, 0:(k - 1), 1:k))
has_intercept = F
paste0('b', ifelse(has_intercept, 0:(k - 1), 1:k))
ifelse(has_intercept, 0:(k - 1), 1:k)
k = 2
ifelse(has_intercept, 0:(k - 1), 1:k)
has_intercept = T
ifelse(has_intercept, 0:(k - 1), 1:k)
k = 3
ifelse(has_intercept, 0:(k - 1), 1:k)
k = 2
if_else(has_intercept, 0:(k - 1), 1:k)
rowname
paste0('b', 0:(k - 1))
CIs <- function(X, Y, c, level = .95, has_intercept = T) {
n <- nrow(X)
k <- ncol(X)
if (missing(c)) {c <- rep(0, k)}
Betahat <- solve(t(X) %*% X, t(X) %*% Y)
I_n <- diag(1, n)
H <- X %*% solve(t(X) %*% X) %*% t(X)
CI <- matrix(rep(0, k * 2), ncol = 2)
for (i in 1:k) {
betahat_i <- Betahat[i, ]
se_i <- sqrt(
((t(Y) %*% (I_n - H) %*% Y) / (n - k)) *
solve(t(X) %*% X)[i, i]
)
t_star <- qt((1 + level) / 2, df = n - k)
CI[i, ] <- c(betahat_i - se_i * t_star, betahat_i + se_i * t_star)
}
colnames(CI, c('lower', 'upper'))
if (has_intercept) {
rowname <- paste0('b', 0:(k - 1))
} else {
rowname <- paste0('b', 1:k)
}
rownames(CI, rowname)
CI
}
(cis <- CIs(X, Y))
X <- tibble(Int = rep(1, 25), l1 = frets[, 1]) %>% as.matrix()
Y <- frets[, 2]
(cis <- CIs(X, Y))
CIs <- function(X, Y, c, level = .95, has_intercept = T) {
n <- nrow(X)
k <- ncol(X)
if (missing(c)) {c <- rep(0, k)}
Betahat <- solve(t(X) %*% X, t(X) %*% Y)
I_n <- diag(1, n)
H <- X %*% solve(t(X) %*% X) %*% t(X)
CI <- matrix(rep(0, k * 2), ncol = 2)
for (i in 1:k) {
betahat_i <- Betahat[i, ]
se_i <- sqrt(
((t(Y) %*% (I_n - H) %*% Y) / (n - k)) *
solve(t(X) %*% X)[i, i]
)
t_star <- qt((1 + level) / 2, df = n - k)
CI[i, ] <- c(betahat_i - se_i * t_star, betahat_i + se_i * t_star)
}
# colnames(CI, c('lower', 'upper'))
# if (has_intercept) {
#     rowname <- paste0('b', 0:(k - 1))
# } else {
#     rowname <- paste0('b', 1:k)
# }
# rownames(CI, rowname)
CI
}
(cis <- CIs(X, Y))
colnames(cis, c('lower', 'upper'))
CIs <- function(X, Y, c, level = .95, has_intercept = T) {
n <- nrow(X)
k <- ncol(X)
if (missing(c)) {c <- rep(0, k)}
Betahat <- solve(t(X) %*% X, t(X) %*% Y)
I_n <- diag(1, n)
H <- X %*% solve(t(X) %*% X) %*% t(X)
CI <- matrix(rep(0, k * 2), ncol = 2)
for (i in 1:k) {
betahat_i <- Betahat[i, ]
se_i <- sqrt(
((t(Y) %*% (I_n - H) %*% Y) / (n - k)) *
solve(t(X) %*% X)[i, i]
)
t_star <- qt((1 + level) / 2, df = n - k)
CI[i, ] <- c(betahat_i - se_i * t_star, betahat_i + se_i * t_star)
}
colnames(CI) <- c('lower', 'upper')
if (has_intercept) {
rowname <- paste0('b', 0:(k - 1))
} else {
rowname <- paste0('b', 1:k)
}
rownames(CI) <- rowname
CI
}
(cis <- CIs(X, Y))
